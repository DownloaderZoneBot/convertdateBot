import logging
import os
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from hijri_converter import Hijri, Gregorian

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

ARABIC_MONTHS = {
    "ููุงูุฑ": 1, "ูุจุฑุงูุฑ": 2, "ูุงุฑุณ": 3, "ุฅุจุฑูู": 4, "ุงุจุฑูู": 4,
    "ูุงูู": 5, "ููููู": 6, "ููููู": 7, "ุฃุบุณุทุณ": 8, "ุงุบุณุทุณ": 8,
    "ุณุจุชูุจุฑ": 9, "ุฃูุชูุจุฑ": 10, "ุงูุชูุจุฑ": 10, "ููููุจุฑ": 11, "ุฏูุณูุจุฑ": 12,
    "ูุญุฑู": 1, "ุตูุฑ": 2, "ุฑุจูุน ุงูุฃูู": 3, "ุฑุจูุน ุงูุซุงูู": 4, 
    "ุฌูุงุฏู ุงูุฃููู": 5, "ุฌูุงุฏู ุงูุขุฎุฑุฉ": 6, "ุฑุฌุจ": 7, "ุดุนุจุงู": 8, 
    "ุฑูุถุงู": 9, "ุดูุงู": 10, "ุฐู ุงููุนุฏุฉ": 11, "ุฐู ุงูุญุฌุฉ": 12
}

def extract_date_components(text):
    # ุฏุงูุฉ ุฌุฏูุฏุฉ ูุงุณุชุฎุฑุงุฌ ุงูููููุงุช ุจุดูู ุฃูุถู
    text = re.sub(r'[ุ\-/_]', ' ', text)  # ุงุณุชุจุฏุงู ุงูููุงุตู ุจูุณุงูุงุช
    parts = re.split(r'\s+', text.strip())
    
    day = None
    month = None
    year = None
    
    for part in parts:
        if part.isdigit():
            num = int(part)
            if 1 <= num <= 31:
                if day is None:
                    day = num
                else:
                    year = num
            else:
                year = num
        else:
            for name, num in ARABIC_MONTHS.items():
                if name in part or name.replace(' ', '') in part:
                    month = num
                    break
    
    return day, month, year

def parse_text_to_gregorian(text):
    day, month, year = extract_date_components(text)
    
    if not all([day, month]):
        raise ValueError("ููููุงุช ุงูุชุงุฑูุฎ ูุงูุตุฉ")
    
    if year is None:
        year = datetime.now().year
        
    return Gregorian(year, month, day)

def parse_text_to_hijri(text):
    day, month, year = extract_date_components(text)
    
    if not all([day, month]):
        raise ValueError("ููููุงุช ุงูุชุงุฑูุฎ ูุงูุตุฉ")
    
    if year is None:
        year = Hijri.today().year
        
    return Hijri(year, month, day)

def detect_and_convert(text):
    text = text.strip()
    original_text = text
    
    try:
        # ูุญุงููุฉ ุงูุชุญููู ุงููุจุงุดุฑ ููุตูุบ ุงูุฑูููุฉ ุฃููุงู
        if re.match(r'^\d{4}-\d{1,2}-\d{1,2}$', text):
            year, month, day = map(int, text.split('-'))
            g = Gregorian(year, month, day)
            h = Hijri.from_gregorian(year, month, day)
        elif re.match(r'^\d{1,2}-\d{1,2}-\d{4}$', text):
            day, month, year = map(int, text.split('-'))
            g = Gregorian(year, month, day)
            h = Hijri.from_gregorian(year, month, day)
        else:
            # ูุนุงูุฌุฉ ุงูุญุงูุงุช ุงููุตูุฉ
            text_lower = text.lower()
            if text_lower in ["ุงูููู", "today"]:
                today = datetime.now()
                g = Gregorian(today.year, today.month, today.day)
                h = Hijri.from_gregorian(today.year, today.month, today.day)
            elif text_lower in ["ุบุฏูุง", "ุบุฏุง", "ุบุฏุงู", "tomorrow"]:
                tomorrow = datetime.now() + timedelta(days=1)
                g = Gregorian(tomorrow.year, tomorrow.month, tomorrow.day)
                h = Hijri.from_gregorian(g.year, g.month, g.day)
            elif text_lower in ["ุฃูุณ", "yesterday", "ุงูุณ"]:
                yesterday = datetime.now() - timedelta(days=1)
                g = Gregorian(yesterday.year, yesterday.month, yesterday.day)
                h = Hijri.from_gregorian(g.year, g.month, g.day)
            else:
                # ูุญุงููุฉ ุงูุชุญููู ูุชุงุฑูุฎ ูุฌุฑู ุฃู ูููุงุฏู ูุตู
                try:
                    g = parse_text_to_gregorian(original_text)
                    h = Hijri.from_gregorian(g.year, g.month, g.day)
                except:
                    h = parse_text_to_hijri(original_text)
                    g = h.to_gregorian()
        
        # ุงูุชุญูู ูู ุตุญุฉ ุงูุชุงุฑูุฎ
        g.to_date()  # ุณูthrow ุฎุทุฃ ุฅุฐุง ูุงู ุงูุชุงุฑูุฎ ุบูุฑ ุตุงูุญ
        h.to_date()
        
        weekday = g.to_date().strftime('%A')
        days_ar = {
            "Saturday": "ุงูุณุจุช", "Sunday": "ุงูุฃุญุฏ", "Monday": "ุงูุงุซููู",
            "Tuesday": "ุงูุซูุงุซุงุก", "Wednesday": "ุงูุฃุฑุจุนุงุก",
            "Thursday": "ุงูุฎููุณ", "Friday": "ุงูุฌูุนุฉ"
        }
        return g, h, days_ar.get(weekday, weekday)
    
    except Exception as e:
        raise ValueError(f"ูุง ูููู ุชุญููู ุงูุชุงุฑูุฎ: {str(e)}")

@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    await message.reply(
        "ูุฑุญุจูุง! ุฃุฑุณู ุชุงุฑูุฎูุง ูุฌุฑููุง ุฃู ูููุงุฏููุง ูุชุญูููู.\n"
        "ุฃูุซูุฉ:\n"
        "โข 25 ุฑูุถุงู 1445\n"
        "โข 2023-10-05\n"
        "โข 5 ุดูุงู\n"
        "โข ุบุฏูุง"
    )

@dp.message_handler()
async def convert(message: types.Message):
    try:
        g, h, weekday = detect_and_convert(message.text)
        response = (
            f"๐ ุงููููุงุฏู: {g.year}-{g.month:02d}-{g.day:02d}\n"
            f"๐ ุงููุฌุฑู: {h.year}-{h.month:02d}-{h.day:02d}\n"
            f"๐ ุงูููู: {weekday}"
        )
        await message.reply(response)
    except Exception as e:
        await message.reply(
            f"โ ุฎุทุฃ ูู ุงูุชุญููู: {str(e)}\n"
            "ุงูุฑุฌุงุก ุงุณุชุฎุฏุงู ุฅุญุฏู ุงูุตูุบ ุงูุชุงููุฉ:\n"
            "โข ููู ุดูุฑ ุณูุฉ (ูุซุงู: 25 ุฑูุถุงู 1445)\n"
            "โข ุณูุฉ-ุดูุฑ-ููู (ูุซุงู: 2023-10-05)\n"
            "โข ููู-ุดูุฑ-ุณูุฉ (ูุซุงู: 05-10-2023)"
        )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
